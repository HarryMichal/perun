.. _internals-overview:

Perun Internals
===============

Perun acts as a wrapper around the version control system, which stores and annotates the
information about profiles. Currently only ``git`` is supported as a version control system.
In order to register support for new version control system consult :ref:`internals-vcs-custom`.
Internally Perun is inspired by GIT and stores the profiles similarly as objects compressed
by zlib and identified by hashes. :ref:`internals-store` describes the internal model of Perun
more briefly.

.. todo::
    Mention that taggit is work in progress.

.. todo::
    Add picture how Perun and VCS coexist

.. todo::
    Add picture, where Perun and VCS is highlighted along with what is stored etc.

.. _internals-vcs:

Version Control Systems
-----------------------

Version Control System takes care of storing changes between different versions (or snapshots) of
project. For each change one often requires to store the performance profiles in order to detect
potential performance degradation. :ref:`internals-vcs-api` describes the necessary API that
Perun requires in order to serve as a wrapper over VCS of given type.

.. _internals-vcs-api:

Version Control System API
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. module:: perun.vcs

.. autofunction:: init

.. autofunction:: walk_minor_versions

.. autofunction:: walk_major_versions

.. autofunction:: get_minor_head

.. autofunction:: get_head_major_version

.. autofunction:: get_minor_version_info

.. autofunction:: check_minor_version_validity

.. autofunction:: massage_parameter

.. _internals-vcs-custom:

Creating Support for Custom VCS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can register support for your own version control system as follows:

    1. Create a new module in ``perun/vcs`` implementing functions from :ref:`internals-vcs-api`.

    2. Register your newly created module in :func:`get_supported_module_names`.

    3. Verify that registering did not break anything in the Perun and optionally reinstall Perun::

        make test
        make install

.. _internals-store:

Perun Storage
-------------

The current version of Perun storage is based on GIT and is meant for easy distribution, flexibility
and easier managing. Different versions of storages are currently in design. All of the internal
files are stored in the ``.perun`` directory consisting of the following infrastructure::

    .perun/
        |-- /cache
        |-- /jobs
        |-- /objects
        |-- local.yml

``.perun/cache``:
    Currently in design, is meant to store the latest, unpacked profiles for quicker handling.

``.perun/jobs``:
    Contains pending jobs, that were generated by collectors, or postprocessed by some
    postprocessors, but are not yet assigned to concrete minor versions. These profiles contains
    the tag ``origin`` inside which specifies which minor version is the parent of the profile.
    This is meant to prevent assigning profiles to incorrect minor versions.

``.perun/objects``:
    Contains objects of Perun compressed by zlib. An object of Perun is either a index corresponding
    to a minor version, which lists information about assigned profiles for a given minor version.
    Or the object is compressed profile (but without the ``origin`` tag, since it already assigned).

``local.yml``:
    Contains local configuration, e.g. the specification of wrapped repository, job matrixes or
    formatting strings corresponding to concrete VCS. See :doc:`config` for more information about
    configuration of Perun.

Perun Index Specification
~~~~~~~~~~~~~~~~~~~~~~~~~

Perun Index is in binary format with the following specification:

`4B`:
    `pidx` magic constant specifying that the file is perun index

`4B`:
    Version of the index (for potential future backward compatibility)

`4B`:
    Number of entries in the index

`?B`:
    Variable number of index entries, where each entry consists of following parts:

    * `4B`: Timestamp of the profile
    * `20B`: SHA identification of the profile, i.e. where in ``.perun/objects`` the profile is
      compressed
    * `?B`: Path of variable length terminated by null byte.


The Lifetime of profile: Internals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Registering new profile
"""""""""""""""""""""""

.. todo::
    Write how new profiles is assigned to a given minor version

Removing profile from index
"""""""""""""""""""""""""""

.. todo::
    Write how the profile is removed from the index, step by step

Looking up profile
""""""""""""""""""

.. todo::
    Write how the profile is looked up during show/etc/talk about tags etc.

.. todo::
    Add some picture of layers and stuff like that

.. todo::
    Add some picture specifying the internal of index
