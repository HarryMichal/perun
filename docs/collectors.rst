.. _collectors-overview:

Collectors Overview
===================

.. todo::
   Missing info: Ways how collectors are run (by command and by matrix

.. automodule:: perun.collect

.. _collectors-list:

Supported Collectors
--------------------

Perun currently supports three collectors:

  1. :ref:`collectors-complexity` (authored by **Jirka Pavela**), which collects the running times
     of C/C++ functions along with the size of the structures they were executed on. E.g. this
     collects resources such that function ``search`` over the class ``SingleLinkedList`` took 100ms
     on single linked list with one million elements. :ref:`collectors-complexity-examples` shows
     other examples of profiles generated by :ref:`collectors-complexity`

  2. :ref:`collectors-memory` (authored by **Radima Podola**), which collects information about
     allocations of C/C++ programs along with their type and other information like e.g. the trace.
     :ref:`collectors-memory-examples` shows several generated profiles by :ref:`collectors-memory`.

  3. :ref:`collectors-time`, which serves as a simple wrapper over ``time`` utility

Moreover, you can easily create and register your own collectors as described in
:ref:`collectors-custom`. Collector modules are implementation independent (hence, can be written
in any language) and only requires simple python interface registered within Perun.

.. _collectors-complexity:

Complexity Collector
~~~~~~~~~~~~~~~~~~~~

.. automodule:: perun.collect.complexity

.. automodule:: perun.collect.complexity.run

.. _collectors-complexity-cli:

Command Line Interface
""""""""""""""""""""""

.. click:: perun.collect.complexity.run:complexity
   :prog: perun collect complexity

.. _collectors-complexity-examples:

Examples
""""""""

.. todo::
   Add some examples of outputs of complexity collect

.. _collectors-memory:

Memory Collector
~~~~~~~~~~~~~~~~

.. automodule:: perun.collect.memory

.. automodule:: perun.collect.memory.run

Command Line Interface
""""""""""""""""""""""

.. click:: perun.collect.memory.run:memory
   :prog: perun collect memory

.. _collectors-memory-examples:

Examples
""""""""

.. todo::
   Add some examples of outputs of complexity collect

.. _collectors-time:

Time Collector
~~~~~~~~~~~~~~

.. automodule:: perun.collect.time

.. automodule:: perun.collect.time.run

Command Line Interface
""""""""""""""""""""""

.. click:: perun.collect.time.run:time
   :prog: perun collect time

.. _collectors-time-examples:

Examples
""""""""

.. todo::
   Add some examples of outputs of complexity collect

.. _collectors-custom:

Creating your own Collector
---------------------------

.. currentmodule:: perun.utils

.. todo::
   Write about the requirements for the __init__.py

.. todo::
   Include from "template" stored somewhere in perun directory

.. todo::
   Include sources of the get_supported_module_names function

.. todo::
   Fix the reference for get_supported_module_names

.. todo::
   Add reference to click

New collectors can be easily registered within Perun in several steps. Internally they can be
implemented in any programming language and in order to work with Perun requires three phases
to be specified as given in :ref:`collectors-overview`---``before()``, ``collect()`` and
``after()``. Each new collector requires a interface module ``run.py``, which contains the
three functions and, moreover, a cli API for Click.

You can register your new collector as follows:

   1. Create a new module in ``perun/collect`` with the following structure::

        /perun
        |-- /collect
            |-- /new_module
                |-- __init__.py
                |-- run.py
            |-- /complexity
            ...

   2. Implement the ``run.py`` module with ``collect()`` function, (optionally with ``before()`` and
      ``after()``).

   3. Implement command line interface function in ``run.py``. This function will be called when
      Perun is run from command line as ``perun collect ... new_module``

   4. Register your newly created module in :func:`get_supported_module_names`.

   5. Verify that registering did not break anything in the Perun and optionally reinstall Perun::

        make test
        make install
